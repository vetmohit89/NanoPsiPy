#!/usr/bin/env python
import subprocess
import argparse
import os

from NanoPsiPy.merge_script import merge_csvs
from NanoPsiPy.chi_square import analyze

def merge_and_analyze(control_file, treatment_file, output_folder, data_type):
    # Step 1: Run the first script (merge_script.py) 
    merge_new = merge_csvs(control_file, treatment_file, output_folder, data_type)

    # Step 2: Run the second script (chi_square.py)
    analyze(merge_new)
    #analyze_command = [
        #"python", "chi_square.py",
        #"--input-file", os.path.join(output_folder, f"{os.path.splitext(os.path.basename(control_file))[0]}_vs_{os.path.splitext(os.path.basename(treatment_file))[0]}.csv")
    #]
    #subprocess.run(analyze_command, check=True)

if __name__ == "__main__":
    # Create argument parser
    parser = argparse.ArgumentParser(description="Merge and analyze two CSV files.")
    parser.add_argument('-c', '--control-file', required=True, help="Path to the control CSV file")
    parser.add_argument('-t', '--treatment-file', required=True, help="Path to the treatment CSV file")
    parser.add_argument('-o', '--output-folder', required=True, help="Path to the output folder")
    parser.add_argument('-d', '--data-type', choices=['transcriptome', 'genome'], required=True, help="Type of data (transcriptome or genome)")
    args = parser.parse_args()

    # Run the merged analysis function with command-line arguments
    merge_and_analyze(args.control_file, args.treatment_file, args.output_folder, args.data_type)
